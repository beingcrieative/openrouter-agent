[
    {
        "url": "https://docs.convex.dev/home",
        "content": "# Convex Docs\nConvex is an all-in-one backend platform with thoughtful, product-centric APIs.\n\nUse [TypeScript](/production/best-practices/typescript) to write [queries as\ncode](/functions/query-functions) that are [automatically\ncached](/realtime#automatic-caching) and [realtime](/realtime), with an acid\ncompliant [relational database](/database).\n\n## Learn about Convex by creating a chat app\nConvex is a novel, fun, and extremely productive way to make backends for your\n\n## Quickstarts[](#quickstarts)\nQuickly get up and running with your favorite frontend tooling or language:\n\n## React\n## Next.js\n## Remix\n## TanStack Start\n## React Native\n## Vue\n## Svelte\n## Node.js\n## Bun\n## Script tag\n## Python\n## iOS Swift\n## Android Kotlin\n## Rust\n## Why Convex?[](#why-convex)\n## Backends Should be Designed for Product Developers\n## Intro to Convex\n## Supercharging your app with a reactive backend\n## Why I use Convex over Supabase as my BaaS\nRead the team's Perspectives on [Stack](https://stack.convex.dev):\n\n## Convex vs Relational Databases\n## Convex vs Firebase\n## It's not you, it's SQL\n## How Convex Works\n## The Software-Defined Database\n## Convex Perspectives\n## Learn Convex[](#learn-convex)\n## A quick start guide for using Convex with Next.js\n## Fullstack Notion Clone: Next.js 13, React, Convex, Tailwind\n## Build and Deploy a Saas Podcast Platform in Next.js\n## Building a Subscription Based SaaS with Stripe\nSee more walkthroughs and patterns on [Stack](https://stack.convex.dev)",
        "metadata": {
            "title": "Convex Docs | Convex Developer Hub",
            "url": "https://docs.convex.dev/home",
            "hostname": "convex.dev",
            "description": "Convex is an all-in-one backend platform with thoughtful, product-centric",
            "sitename": "docs.convex.dev",
            "date": "2024-01-01",
            "categories": [],
            "tags": [
                "Convex Perspectives",
                "Build AI Apps",
                "Convex Patterns",
                "Convex Walkthroughs"
            ],
            "image": "https://docs.convex.dev/img/social.png",
            "filedate": "2024-12-01"
        }
    },
    {
        "url": "https://docs.convex.dev/quickstart",
        "content": "# Convex Tutorial\nConvex is a novel, fun, and extremely productive way to make backends for your full-stack apps using 100% TypeScript. So first, let's explore the dashboard! Then, we'll get an example app up and running in a few minutes. We'll explore how it works, improve it together, and along the way learn the fundamentals of how to build your own projects in Convex.\n\n## Explore the Convex dashboard[](#explore-the-convex-dashboard)\nBefore you get started we want to give you a quick tour of our dashboard. Click on the button below to connect your Github and create a Convex account.\n\n## Get started with an in-dashboard tutorial\nIn this tutorial you will learn about how to interact with data in the dashboard and run functions. Once finished with the tutorial, you will be directed back here to continue on with a new project.\n\n## Start developing with Convex[](#start-developing-with-convex)\n## Before you begin: You'll need Node.js 16+ and Git\nEnsure you have Node.js version 16 or greater installed on your computer. You\ncan check your version of Node.js by running `node --version`\nin your terminal.\nIf you don't have the appropriate version of Node.js installed,\n[install it from the Node.js website.](https://nodejs.org/en)\n\nIn addition, this walkthrough requires Git, so verify you have it installed by\nrunning `git -v`\nin your terminal. If not, head over to the\n[Git website](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) for\ninstallation instructions.\n\nFirst, clone the example project repo from GitHub:\n\n`git clone https://github.com/get-convex/convex-tour-chat.git`\ncd convex-tour-chat\nIn the project root directory, install `convex`\nand the other project\ndependencies with `npm`\n:\n\n`npm install`\nFinally, this app's `dev`\nnpm command sets up Convex and then runs the web app:\n\n`npm run dev`\nDuring setup, you'll see that Convex uses your GitHub account for authentication. Sign into Convex with GitHub and then accept the default project setup prompts.\n\n**Make sure you keep this command ( npm run dev) running in the background\nthroughout this tutorial.** It's running both the dev web server for the\nfrontend as well as the\n`convex`\ncommand in the background to keep your backend\nin sync with your local codebase.Once your app is up and running, open [localhost:5173](http://localhost:5173)\nand check it out. You'll see a chat frontend running in Node.js on your\ncomputer. This frontend connects to your new Convex backend hosted in the cloud,\nwhich stores and retrieves the app's chat messages:\n\nSince we just checked this codebase out, you may wonder how it knows to connect\nto *your specific* Convex backend? Information about your project backend was\nwritten to the `.env.local`\nfile when we set up the project. When the app starts\nup, the Convex client library uses an environment variable to connect to your\nbackend.\n\nFor extra fun, pop up a couple of browser windows and watch Convex relay chat messages between them:\n\nThroughout the rest of this tutorial, we're going to learn more about how this app works and learn about how to build apps in general using Convex. We'll make a few improvements to this app as we go, and finish by integrating some cool GPT AI.\n\n## Dive into more projects first?\nIf instead you want to see other example projects, head on over to our\n[Template Gallery](https://convex.dev/templates), or see our\n[Quickstarts](/quickstarts).\n\nWe still recommend you make your way back here eventually to learn the basics about how Convex works and how to \"think in Convex.\" Most developers find that once they master the concepts in this tutorial, they're extremely comfortable making new application architectures on the platform.\n\n## Convex main ingredients[](#convex-main-ingredients)\nIn the next three parts, we'll use this chat app to walk through the following fundamental platform concepts:\n\n-\n**The Convex reactor**\nFirst we'll explore the beating heart of Convex, a custom cloud-hosted reactive database called \"the reactor.\" The reactor combines document-relational**tables**with deterministic TypeScript**query**and**mutation**functions. -\n**Convex and your app**\nNext, we'll dive into the app's frontend code, and explore how to use Convex**client libraries**to seamlessly connect your hosted backend to your app. -\n**The platform in action**\nFinally, we'll touch on the broader backend features outside the reactor that work together to create a comprehensive backend platform. In particular, we'll go deep on**actions**, Convex's way to create powerful jobs that integrate your app with third-party services & APIs.\nLet's go!",
        "metadata": {
            "title": "Welcome to Convex | Convex Developer Hub",
            "url": "https://docs.convex.dev/get-started",
            "hostname": "convex.dev",
            "description": "Convex is a novel, fun, and extremely productive way to make backends for your",
            "sitename": "docs.convex.dev",
            "date": "2024-01-01",
            "categories": [],
            "tags": [],
            "image": "https://docs.convex.dev/img/social.png",
            "filedate": "2024-12-01"
        }
    },
    {
        "url": "https://docs.convex.dev/functions",
        "content": "# Functions\nFunctions run on the backend and are written in JavaScript (or TypeScript). They\nare automatically available as APIs accessed through\n[client libraries](/client/react). Everything you do in the Convex\nbackend starts from functions.\n\nThere are three types of functions:\n\n[Queries](/functions/query-functions)read data from your Convex database and are automatically cached and subscribable (realtime, reactive).[Mutations](/functions/mutation-functions)write data to the database and run as a transaction.[Actions](/functions/actions)can call Open AI, Stripe, Twilio, or any other service or API you need to make your app work.\nYou can also build [HTTP actions](/functions/http-actions) when you\nwant to call your functions from a webhook or a custom client.",
        "metadata": {
            "title": "Functions | Convex Developer Hub",
            "url": "https://docs.convex.dev/functions",
            "hostname": "convex.dev",
            "description": "Write functions to define your server behavior.",
            "sitename": "docs.convex.dev",
            "date": "2024-01-01",
            "categories": [],
            "tags": [],
            "image": "https://docs.convex.dev/img/social.png",
            "filedate": "2024-12-01"
        }
    },
    {
        "url": "https://docs.convex.dev/functions/mutation-functions",
        "content": "# Mutations\nMutations insert, update and remove data from the database, check authentication or perform other business logic, and optionally return a response to the client application.\n\nThis is an example mutation, taking in named arguments, writing data to the database and returning a result:\n\n`import { mutation } from \"./_generated/server\";`\nimport { v } from \"convex/values\";\n// Create a new task with the given text\nexport const createTask = mutation({\nargs: { text: v.string() },\nhandler: async (ctx, args) => {\nconst newTaskId = await ctx.db.insert(\"tasks\", { text: args.text });\nreturn newTaskId;\n},\n});\nRead on to understand how to build mutations yourself.\n\n## Mutation names[](#mutation-names)\nMutations follow the same naming rules as queries, see\n[Query names](/functions/query-functions#query-names).\n\nQueries and mutations can be defined in the same file when using named exports.\n\n## The `mutation`\nconstructor[](#the-mutation-constructor)\nTo declare a mutation in Convex use the `mutation`\nconstructor function. Pass it\nan object with a `handler`\nfunction, which performs the mutation:\n\n`import { mutation } from \"./_generated/server\";`\nexport const mutateSomething = mutation({\nhandler: () => {\n// implementation will be here\n},\n});\nUnlike a query, a mutation can but does not have to return a value.\n\n### Mutation arguments[](#mutation-arguments)\nJust like queries, mutations accept named arguments, and the argument values are\naccessible as fields of the second parameter of the `handler`\nfunction:\n\n`import { mutation } from \"./_generated/server\";`\nexport const mutateSomething = mutation({\nhandler: (_, args: { a: number; b: number }) => {\n// do something with `args.a` and `args.b`\n// optionally return a value\nreturn \"success\";\n},\n});\nArguments and responses are automatically serialized and deserialized, and you can pass and return most value-like JavaScript data to and from your mutation.\n\nTo both declare the types of arguments and to validate them, add an `args`\nobject using `v`\nvalidators:\n\n`import { mutation } from \"./_generated/server\";`\nimport { v } from \"convex/values\";\nexport const mutateSomething = mutation({\nargs: { a: v.number(), b: v.number() },\nhandler: (_, args) => {\n// do something with `args.a` and `args.b`\n},\n});\nSee [argument validation](/functions/validation) for the full list of\nsupported types and validators.\n\nThe first parameter to the handler function is reserved for the mutation context.\n\n### Mutation responses[](#mutation-responses)\nQueries can return values of any supported\n[Convex type](/functions/validation) which will be automatically\nserialized and deserialized.\n\nMutations can also return `undefined`\n, which is not a valid Convex value. When a\nmutation returns `undefined`\n**it is translated to null** on the client.\n\n### Mutation context[](#mutation-context)\nThe `mutation`\nconstructor enables writing data to the database, and other\nConvex features by passing a\n[MutationCtx](/generated-api/server#mutationctx) object to the handler\nfunction as the first parameter:\n\n`import { mutation } from \"./_generated/server\";`\nimport { v } from \"convex/values\";\nexport const mutateSomething = mutation({\nargs: { a: v.number(), b: v.number() },\nhandler: (ctx, args) => {\n// Do something with `ctx`\n},\n});\nWhich part of the mutation context is used depends on what your mutation needs to do:\n\n-\nTo read from and write to the database use the\n\n`db`\nfield. Note that we make the handler function an`async`\nfunction so we can`await`\nthe promise returned by`db.insert()`\n:convex/myFunctions.tsTS`import { mutation } from \"./_generated/server\";`\nimport { v } from \"convex/values\";\nexport const addItem = mutation({\nargs: { text: v.string() },\nhandler: async (ctx, args) => {\nawait ctx.db.insert(\"tasks\", { text: args.text });\n},\n});Read on about\n\n[Writing Data](/database/writing-data). -\nTo generate upload URLs for storing files use the\n\n`storage`\nfield. Read on about[File Storage](/file-storage). -\nTo check user authentication use the\n\n`auth`\nfield. Read on about[Authentication](/auth). -\nTo schedule functions to run in the future, use the\n\n`scheduler`\nfield. Read on about[Scheduled Functions](/scheduling/scheduled-functions).\n## Splitting up mutation code via helpers[](#splitting-up-mutation-code-via-helpers)\nWhen you want to split up the code in your mutation or reuse logic across multiple Convex functions you can define and call helper\n\n`import { v } from \"convex/values\";`\nimport { mutation, MutationCtx } from \"./_generated/server\";\nexport const addItem = mutation({\nargs: { text: v.string() },\nhandler: async (ctx, args) => {\nawait ctx.db.insert(\"tasks\", { text: args.text });\nawait trackChange(ctx, \"addItem\");\n},\n});\nasync function trackChange(ctx: MutationCtx, type: \"addItem\" | \"removeItem\") {\nawait ctx.db.insert(\"changes\", { type });\n}\nMutations can call helpers that take a\n[QueryCtx](/generated-api/server#queryctx) as argument, since the\nmutation context can do everything query context can.\n\nYou can `export`\nhelpers to use them across multiple files. They will not be\ncallable from outside of your Convex functions.\n\nSee\n[Type annotating server side helpers](/production/best-practices/typescript#type-annotating-server-side-helpers)\nfor more guidance on TypeScript types.\n\n## Using NPM packages[](#using-npm-packages)\nMutations can import NPM packages installed in `node_modules`\n. Not all NPM\npackages are supported, see\n[Runtimes](/functions/runtimes#default-convex-runtime) for more\ndetails.\n\n`npm install @faker-js/faker`\n`import { faker } from \"@faker-js/faker\";`\nimport { mutation } from \"./_generated/server\";\nexport const randomName = mutation({\nargs: {},\nhandler: async (ctx) => {\nfaker.seed();\nawait ctx.db.insert(\"tasks\", { text: \"Greet \" + faker.person.fullName() });\n},\n});\n## Calling mutations from clients[](#calling-mutations-from-clients)\nTo call a mutation from [React](/client/react) use the generated\n[ useMutation](/client/react#editing-data) hook:\n\nTo call a mutation from [React](/client/react) use the\n[ useMutation](/api/modules/react#usemutation) hook along with the generated\n\n[object.](/generated-api/api)\n`api`\n`import { useMutation } from \"convex/react\";`\nimport { api } from \"../convex/_generated/api\";\nexport function MyApp() {\nconst mutateSomething = useMutation(api.myFunctions.mutateSomething);\nconst handleClick = () => {\nmutateSomething({ a: 1, b: 2 });\n};\n// pass `handleClick` to a button\n// ...\n}\nSee the [React](/client/react) client documentation for all the ways\nqueries can be called.\n\nWhen mutations are called from the [React](/client/react) or\n[Rust](/client/rust) clients, they are executed one at a time in a single,\nordered queue. You don't have to worry about mutations editing the database in a\ndifferent order than they were triggered.\n\n## Transactions[](#transactions)\nMutations run **transactionally**. This means that:\n\n- All database reads inside the transaction get a consistent view of the data in the database. You don't have to worry about a concurrent update changing the data in the middle of the execution.\n- All database writes get committed together. If the mutation writes some data to the database, but later throws an error, no data is actually written to the database.\nFor this to work, similarly to queries, mutations must be deterministic, and\ncannot call third party APIs. To call third party APIs, use\n[actions](/functions/actions).\n\n## Limits[](#limits)\nMutations have a limit to the amount of data they can read and write at once to\nguarantee good performance. Check out these limits\n[here](/functions/error-handling/#database-limitations).\n\nFor information on other limits, see [here](/production/state/limits).",
        "metadata": {
            "title": "Mutations | Convex Developer Hub",
            "url": "https://docs.convex.dev/functions/mutation-functions",
            "hostname": "convex.dev",
            "description": "Mutations insert, update and remove data from the database, check authentication",
            "sitename": "docs.convex.dev",
            "date": "2024-01-01",
            "categories": [],
            "tags": [],
            "image": "https://docs.convex.dev/img/social.png",
            "filedate": "2024-12-01"
        }
    },
    {
        "url": "https://docs.convex.dev/auth",
        "content": "# Authentication\nAuthentication allows you to identify users and restrict what data they can see and edit.\n\n## Convex Auth[](#convex-auth)\nFor client-side React and React Native mobile apps you can implement auth\ndirectly in Convex with the [Convex Auth](/auth/convex-auth) library.\nThis [npm package](https://github.com/get-convex/convex-auth) runs on your\nConvex deployment and helps you build a custom sign-up/sign-in flow via social\nidentity providers, one-time email or SMS access codes, or via passwords.\n\nConvex Auth is in beta (it isn't complete and may change in backward-incompatible ways) and doesn't provide as many features as third party auth integrations. Since it doesn't require signing up for another service it's the quickest way to get auth up and running.\n\nConvex Auth is currently a [beta\nfeature](/production/state/#beta-features). If you have feedback or feature\nrequests, [let us know on Discord](https://convex.dev/community)!\n\nSupport for Next.js is under active development. If you'd like to help test this\nexperimental support please [give it a try](https://labs.convex.dev/auth)!\n\n## Third-party authentication platforms[](#third-party-authentication-platforms)\nLeveraging a Convex integration with a third-party auth provider provides the most comprehensive authentication solutions. Integrating another service provides a ton of functionality like passkeys, two-factor auth, spam protection, and more on top of the authentication basics.\n\n[Clerk](/auth/clerk)is newer and has better Next.js and React Native support[Auth0](/auth/auth0)is more established with more bells and whistles[Custom Auth Integration](/auth/advanced/custom-auth)allow any OpenID Connect-compatible identity provider to be used for authentication\nAfter you integrate one of these, learn more about accessing authentication\ninformation in [Functions](/auth/functions-auth) and storing user\ninformation in the [Database](/auth/database-auth).\n\n## Debugging[](#debugging)\nIf you run into issues consult the [Debugging](/auth/debug) guide.",
        "metadata": {
            "title": "Authentication | Convex Developer Hub",
            "url": "https://docs.convex.dev/auth",
            "hostname": "convex.dev",
            "description": "Add authentication to your Convex app.",
            "sitename": "docs.convex.dev",
            "date": "2024-01-01",
            "categories": [],
            "tags": [],
            "image": "https://docs.convex.dev/img/social.png",
            "filedate": "2024-12-01"
        }
    }
]